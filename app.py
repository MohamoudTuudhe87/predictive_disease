{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "49e68150-a1e7-44a4-9f7d-7615cc5f34dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import joblib\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "# Set page title and layout\n",
    "st.set_page_config(page_title=\"Chronic Disease Predictor\", layout=\"centered\")\n",
    "\n",
    "# Sidebar - Disease selection\n",
    "st.sidebar.title(\"Select Disease\")\n",
    "disease = st.sidebar.radio(\"Choose a disease\", [\"Liver\", \"Heart\", \"Diabetes\"])\n",
    "\n",
    "# Load models once (cached)\n",
    "@st.cache_resource\n",
    "def load_model(name):\n",
    "    return joblib.load(f\"models/{name}_model.pkl\")\n",
    "\n",
    "liver_model = load_model(\"liver\")\n",
    "heart_model = load_model(\"heart\")\n",
    "diabetes_model = load_model(\"diabetes\")\n",
    "\n",
    "# Header\n",
    "st.title(f\"{disease} Disease Prediction\")\n",
    "st.write(\"Enter patient details below:\")\n",
    "\n",
    "# Collect input based on selected disease\n",
    "input_data = {}\n",
    "\n",
    "if disease == \"Liver\":\n",
    "    age = st.number_input(\"Age\", min_value=0)\n",
    "    gender = st.selectbox(\"Gender\", [\"Male\", \"Female\"])\n",
    "    tb = st.number_input(\"Total Bilirubin\")\n",
    "    db = st.number_input(\"Direct Bilirubin\")\n",
    "    alkphos = st.number_input(\"Alkphos Alkaline Phosphotase\")\n",
    "    sgpt = st.number_input(\"Sgpt Alamine Aminotransferase\")\n",
    "    sgot = st.number_input(\"Sgot Aspartate Aminotransferase\")\n",
    "    tp = st.number_input(\"Total Proteins\")\n",
    "    alb = st.number_input(\"ALB Albumin\")\n",
    "    ag_ratio = st.number_input(\"A/G Ratio Albumin and Globulin Ratio\")\n",
    "\n",
    "    input_data = {\n",
    "        'Age of the patient': age,\n",
    "        'Gender of the patient': 1 if gender == \"Male\" else 0,\n",
    "        'Total Bilirubin': tb,\n",
    "        'Direct Bilirubin': db,\n",
    "        'Alkphos Alkaline Phosphotase': alkphos,\n",
    "        'Sgpt Alamine Aminotransferase': sgpt,\n",
    "        'Sgot Aspartate Aminotransferase': sgot,\n",
    "        'Total Protiens': tp,\n",
    "        'ALB Albumin': alb,\n",
    "        'A/G Ratio Albumin and Globulin Ratio': ag_ratio\n",
    "    }\n",
    "\n",
    "elif disease == \"Heart\":\n",
    "    age = st.number_input(\"Age\", min_value=0)\n",
    "    sex = st.selectbox(\"Sex\", [\"Male\", \"Female\"])\n",
    "    cp = st.selectbox(\"Chest Pain Type\", [0, 1, 2, 3])\n",
    "    trestbps = st.number_input(\"Resting Blood Pressure\")\n",
    "    chol = st.number_input(\"Serum Cholesterol\")\n",
    "    fbs = st.selectbox(\"Fasting Blood Sugar > 120 mg/dl\", [0, 1])\n",
    "    restecg = st.selectbox(\"Resting ECG\", [0, 1, 2])\n",
    "    thalach = st.number_input(\"Max Heart Rate Achieved\")\n",
    "    exang = st.selectbox(\"Exercise Induced Angina\", [0, 1])\n",
    "    oldpeak = st.number_input(\"ST Depression\")\n",
    "    slope = st.selectbox(\"Slope of Peak Exercise ST Segment\", [0, 1, 2])\n",
    "    ca = st.selectbox(\"Number of Major Vessels\", [0, 1, 2, 3])\n",
    "    thal = st.selectbox(\"Thalassemia\", [0, 1, 2])\n",
    "\n",
    "    input_data = {\n",
    "        'age': age,\n",
    "        'sex': 1 if gender == \"Male\" else 0,\n",
    "        'cp': cp,\n",
    "        'trestbps': trestbps,\n",
    "        'chol': chol,\n",
    "        'fbs': fbs,\n",
    "        'restecg': restecg,\n",
    "        'thalach': thalach,\n",
    "        'exang': exang,\n",
    "        'oldpeak': oldpeak,\n",
    "        'slope': slope,\n",
    "        'ca': ca,\n",
    "        'thal': thal\n",
    "    }\n",
    "\n",
    "elif disease == \"Diabetes\":\n",
    "    pregnancies = st.number_input(\"Pregnancies\", min_value=0)\n",
    "    glucose = st.number_input(\"Glucose Level\")\n",
    "    blood_pressure = st.number_input(\"Blood Pressure\")\n",
    "    skin_thickness = st.number_input(\"Skin Thickness\")\n",
    "    insulin = st.number_input(\"Insulin Level\")\n",
    "    bmi = st.number_input(\"BMI\")\n",
    "    dpf = st.number_input(\"Diabetes Pedigree Function\")\n",
    "    age = st.number_input(\"Age\", min_value=0)\n",
    "\n",
    "    input_data = {\n",
    "        'Pregnancies': pregnancies,\n",
    "        'Glucose': glucose,\n",
    "        'BloodPressure': blood_pressure,\n",
    "        'SkinThickness': skin_thickness,\n",
    "        'Insulin': insulin,\n",
    "        'BMI': bmi,\n",
    "        'DiabetesPedigreeFunction': dpf,\n",
    "        'Age': age\n",
    "    }\n",
    "\n",
    "# Predict Button\n",
    "if st.button(\"Predict\"):\n",
    "    df = pd.DataFrame([input_data])\n",
    "\n",
    "    if disease == \"Liver\":\n",
    "        prediction = liver_model.predict(df)[0]\n",
    "        result = \"Likely Liver Disease\" if prediction == 1 else \"No Liver Disease\"\n",
    "    elif disease == \"Heart\":\n",
    "        prediction = heart_model.predict(df)[0]\n",
    "        result = \"Likely Heart Disease\" if prediction == 1 else \"No Heart Disease\"\n",
    "    elif disease == \"Diabetes\":\n",
    "        prediction = diabetes_model.predict(df)[0]\n",
    "        result = \"Likely Diabetic\" if prediction == 1 else \"Not Diabetic\"\n",
    "\n",
    "    st.success(f\"Prediction: {result}\")\n",
    "\n",
    "    # Optional: Save input to CSV\n",
    "    df['Prediction'] = result\n",
    "    df.to_csv(\"user_inputs.csv\", mode='a', header=not os.path.exists(\"user_inputs.csv\"), index=False)\n",
    "    st.info(\"Input and prediction saved.\")\n",
    "\n",
    "# Show model info\n",
    "st.sidebar.markdown(\"### Model Info\")\n",
    "st.sidebar.write(\"Trained using Machine Learning Models\")\n",
    "st.sidebar.write(\"Models used: Random Forest / Logistic Regression / SVM\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05ef105e-6cb4-4d7f-af34-ac93055caa7c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
